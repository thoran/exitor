#!/usr/bin/env ruby
# exitor

# 20241013
# 0.2.0

# Description: A quick way to choose which country the tor exit node is in.

# Changes since 0.1:
# -/0 (Don't attempt to restart tor. TorBrowser needs to start it after it has been killed.)
# 1. - running_tor(): Just use tor_process_running?().
# 2. - path_to_tor(): Not necessary if no longe restarting the process.
# 3. - tor_installed?()
# 4. - tor_browser_installed?()
# 5. - torrc_file_contents(): Not being used.
# 6. ~ torrc_file_path(): Further simplified after the removal of reference to tor.real in the previous minor revision.
# 7. /kill_and_restart_process()/kill_tor()/
# 8. /tor_process_running?()/tor_running?()/: It wouldn't be a process if wasn't around. We're not presently concerned about whether it is stopped!
# 9. ~ main():
#   i. Remove reference to running_tor()
#   ii. Make reference to kill_tor() and tor_running?().
#   iii. Check for whether a country_to_exit_through was supplied at all rather waiting till it can't be found in exit_through_country().
# 10. ~ torrc_file_path(): /tor_process_running?()/tor_running?()/

# Todo:
# 1. Do better checks for whether a torrc file is where we think it might be.

require 'FileUtils/which'
require 'http.rb'
require 'sys/proctable'
require 'SimpleCSV'

def current_users_home_directory
  ENV['HOME']
end

DEFAULT_COUNTRY_CODES_FILE_PATH = "#{current_users_home_directory}/data/country_codes.csv"

def country_codes_file
  @country_code_file ||= (
    if File.exist?(DEFAULT_COUNTRY_CODES_FILE_PATH)
      File.read(DEFAULT_COUNTRY_CODES_FILE_PATH)
    else
      response = HTTP.get('https://datahub.io/core/country-list/r/data.csv')
      File.write(DEFAULT_COUNTRY_CODES_FILE_PATH, response.body)
      response.body
    end
  )
end

def current_user
  ENV['USER']
end

def find_country_by_code(candidate_country_code)
  country_codes.detect{|country| country['Code'] == candidate_country_code.upcase}
end

def find_country_by_name(candidate_country_name)
  country_codes.detect{|country| country['Name'] == candidate_country_name.upcase}
end

def country_codes
  @country_codes ||= SimpleCSV.new(country_codes_file, headers: true).read
end

def torrc_file_path
  if File.exist?("#{current_users_home_directory}/Library/Application\ Support/TorBrowser-Data/Tor/torrc") && tor_running?
    "#{current_users_home_directory}/Library/Application\ Support/TorBrowser-Data/Tor/torrc"
  else # assume that we're using cli tor...
    '/usr/local/etc/tor/torrc'
  end
end

def torrc_file_contents
  File.read(torrc_file_path)
end

def tor_running?
  !Sys::ProcTable.ps.select{|p| p.comm == 'tor'}.empty?
end

def pid
  ::Sys::ProcTable.ps.select{|p| p.comm == 'tor'}.first&.pid
end

def country_code_exist?(candidate_country_code)
  !find_country_by_code(candidate_country_code).nil?
end

def country_name_exist?(candidate_country_name)
  !find_country_by_name(candidate_country_name).nil?
end

def country_to_exit_through
  ARGV[0]
end

def exit_through_country(candidate_country)
  if country = find_country_by_code(candidate_country)
    edit_exit_node_config(country['Code'])
  elsif country = find_country_by_name(candidate_country)
    edit_exit_node_config(country['Code'])
  else
    raise "#{candidate_country} was not found."
  end
end

def edit_exit_node_config(new_country_code)
  new_torrc_file_contents = ''
  exit_nodes_line_altered = false
  File.read(torrc_file_path).each_line do |line|
    if line.match?('ExitNodes \{(..)\}')
      exit_nodes_line_altered = true
      new_torrc_file_contents << "ExitNodes {#{new_country_code}}\n"
    else
      new_torrc_file_contents << line
    end
  end
  unless exit_nodes_line_altered
    new_torrc_file_contents << "ExitNodes {#{new_country_code}}\n"
  end
  File.open(torrc_file_path, 'w+') do |f|
    f.puts new_torrc_file_contents
  end
end

def remove_exit_node_config
  new_torrc_file_contents = ''
  File.read(torrc_file_path).each_line do |line|
    if !line.match?('ExitNodes \{(..)\}')
      new_torrc_file_contents << line
    end
  end
  File.open(torrc_file_path, 'w+') do |f|
    f.puts new_torrc_file_contents
  end
end

def kill_tor
  Process.kill(9, pid) if pid
end

def main
  unless File.exist?(torrc_file_path)
    FileUtils.touch(torrc_file_path)
  end
  if country_to_exit_through.nil?
    raise "Supply a country name or code or 'any' to remove exit node config."
  elsif country_to_exit_through == 'any'
    remove_exit_node_config
  else
    exit_through_country(country_to_exit_through)
  end
  kill_tor if tor_running?
end

main
